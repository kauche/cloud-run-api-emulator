package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// ListServices represents a row from 'list_services'.
type ListServices struct {
	Parent      string `json:"parent"`      // parent
	Name        string `json:"name"`        // name
	Description string `json:"description"` // description
	UID         string `json:"uid"`         // uid
	Generation  int    `json:"generation"`  // generation
	CreatedAt   Time   `json:"created_at"`  // created_at
}

// ListServicesByParentLimit runs a custom query, returning results as [ListServices].
func ListServicesByParentLimit(ctx context.Context, db DB, parent string, limit int32) ([]*ListServices, error) {
	// query
	const sqlstr = `SELECT` +
		`    parent,` +
		`    name,` +
		`    description,` +
		`    uid,` +
		`    generation,` +
		`    created_at` +
		`  FROM services` +
		`  WHERE` +
		`    parent = $1` +
		`  ORDER BY` +
		`    created_at DESC,` +
		`    parent ASC,` +
		`    name ASC` +
		`  LIMIT` +
		`    $2;`
	// run
	logf(sqlstr, parent, limit)
	rows, err := db.QueryContext(ctx, sqlstr, parent, limit)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// load results
	var res []*ListServices
	for rows.Next() {
		var ls ListServices
		// scan
		if err := rows.Scan(&ls.Parent, &ls.Name, &ls.Description, &ls.UID, &ls.Generation, &ls.CreatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &ls)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}
