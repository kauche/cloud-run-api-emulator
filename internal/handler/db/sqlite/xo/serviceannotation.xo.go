package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// ServiceAnnotation represents a row from 'service_annotations'.
type ServiceAnnotation struct {
	ServiceParent string `json:"service_parent"` // service_parent
	ServiceName   string `json:"service_name"`   // service_name
	Key           string `json:"key"`            // key
	Value         string `json:"value"`          // value
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [ServiceAnnotation] exists in the database.
func (sa *ServiceAnnotation) Exists() bool {
	return sa._exists
}

// Deleted returns true when the [ServiceAnnotation] has been marked for deletion
// from the database.
func (sa *ServiceAnnotation) Deleted() bool {
	return sa._deleted
}

// Insert inserts the [ServiceAnnotation] to the database.
func (sa *ServiceAnnotation) Insert(ctx context.Context, db DB) error {
	switch {
	case sa._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case sa._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO service_annotations (` +
		`service_parent, service_name, key, value` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)`
	// run
	logf(sqlstr, sa.ServiceParent, sa.ServiceName, sa.Key, sa.Value)
	if _, err := db.ExecContext(ctx, sqlstr, sa.ServiceParent, sa.ServiceName, sa.Key, sa.Value); err != nil {
		return logerror(err)
	}
	// set exists
	sa._exists = true
	return nil
}

// Update updates a [ServiceAnnotation] in the database.
func (sa *ServiceAnnotation) Update(ctx context.Context, db DB) error {
	switch {
	case !sa._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case sa._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE service_annotations SET ` +
		`value = $1 ` +
		`WHERE service_parent = $2 AND service_name = $3 AND key = $4`
	// run
	logf(sqlstr, sa.Value, sa.ServiceParent, sa.ServiceName, sa.Key)
	if _, err := db.ExecContext(ctx, sqlstr, sa.Value, sa.ServiceParent, sa.ServiceName, sa.Key); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [ServiceAnnotation] to the database.
func (sa *ServiceAnnotation) Save(ctx context.Context, db DB) error {
	if sa.Exists() {
		return sa.Update(ctx, db)
	}
	return sa.Insert(ctx, db)
}

// Upsert performs an upsert for [ServiceAnnotation].
func (sa *ServiceAnnotation) Upsert(ctx context.Context, db DB) error {
	switch {
	case sa._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO service_annotations (` +
		`service_parent, service_name, key, value` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)` +
		` ON CONFLICT (service_parent, service_name, key) DO ` +
		`UPDATE SET ` +
		`value = EXCLUDED.value `
	// run
	logf(sqlstr, sa.ServiceParent, sa.ServiceName, sa.Key, sa.Value)
	if _, err := db.ExecContext(ctx, sqlstr, sa.ServiceParent, sa.ServiceName, sa.Key, sa.Value); err != nil {
		return logerror(err)
	}
	// set exists
	sa._exists = true
	return nil
}

// Delete deletes the [ServiceAnnotation] from the database.
func (sa *ServiceAnnotation) Delete(ctx context.Context, db DB) error {
	switch {
	case !sa._exists: // doesn't exist
		return nil
	case sa._deleted: // deleted
		return nil
	}
	// delete with composite primary key
	const sqlstr = `DELETE FROM service_annotations ` +
		`WHERE service_parent = $1 AND service_name = $2 AND key = $3`
	// run
	logf(sqlstr, sa.ServiceParent, sa.ServiceName, sa.Key)
	if _, err := db.ExecContext(ctx, sqlstr, sa.ServiceParent, sa.ServiceName, sa.Key); err != nil {
		return logerror(err)
	}
	// set deleted
	sa._deleted = true
	return nil
}

// ServiceAnnotationByServiceParentServiceNameKey retrieves a row from 'service_annotations' as a [ServiceAnnotation].
//
// Generated from index 'sqlite_autoindex_service_annotations_1'.
func ServiceAnnotationByServiceParentServiceNameKey(ctx context.Context, db DB, serviceParent, serviceName, key string) (*ServiceAnnotation, error) {
	// query
	const sqlstr = `SELECT ` +
		`service_parent, service_name, key, value ` +
		`FROM service_annotations ` +
		`WHERE service_parent = $1 AND service_name = $2 AND key = $3`
	// run
	logf(sqlstr, serviceParent, serviceName, key)
	sa := ServiceAnnotation{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, serviceParent, serviceName, key).Scan(&sa.ServiceParent, &sa.ServiceName, &sa.Key, &sa.Value); err != nil {
		return nil, logerror(err)
	}
	return &sa, nil
}
