package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// ServiceLabel represents a row from 'service_labels'.
type ServiceLabel struct {
	ServiceParent string `json:"service_parent"` // service_parent
	ServiceName   string `json:"service_name"`   // service_name
	Key           string `json:"key"`            // key
	Value         string `json:"value"`          // value
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [ServiceLabel] exists in the database.
func (sl *ServiceLabel) Exists() bool {
	return sl._exists
}

// Deleted returns true when the [ServiceLabel] has been marked for deletion
// from the database.
func (sl *ServiceLabel) Deleted() bool {
	return sl._deleted
}

// Insert inserts the [ServiceLabel] to the database.
func (sl *ServiceLabel) Insert(ctx context.Context, db DB) error {
	switch {
	case sl._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case sl._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO service_labels (` +
		`service_parent, service_name, key, value` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)`
	// run
	logf(sqlstr, sl.ServiceParent, sl.ServiceName, sl.Key, sl.Value)
	if _, err := db.ExecContext(ctx, sqlstr, sl.ServiceParent, sl.ServiceName, sl.Key, sl.Value); err != nil {
		return logerror(err)
	}
	// set exists
	sl._exists = true
	return nil
}

// Update updates a [ServiceLabel] in the database.
func (sl *ServiceLabel) Update(ctx context.Context, db DB) error {
	switch {
	case !sl._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case sl._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE service_labels SET ` +
		`value = $1 ` +
		`WHERE service_parent = $2 AND service_name = $3 AND key = $4`
	// run
	logf(sqlstr, sl.Value, sl.ServiceParent, sl.ServiceName, sl.Key)
	if _, err := db.ExecContext(ctx, sqlstr, sl.Value, sl.ServiceParent, sl.ServiceName, sl.Key); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [ServiceLabel] to the database.
func (sl *ServiceLabel) Save(ctx context.Context, db DB) error {
	if sl.Exists() {
		return sl.Update(ctx, db)
	}
	return sl.Insert(ctx, db)
}

// Upsert performs an upsert for [ServiceLabel].
func (sl *ServiceLabel) Upsert(ctx context.Context, db DB) error {
	switch {
	case sl._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO service_labels (` +
		`service_parent, service_name, key, value` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)` +
		` ON CONFLICT (service_parent, service_name, key) DO ` +
		`UPDATE SET ` +
		`value = EXCLUDED.value `
	// run
	logf(sqlstr, sl.ServiceParent, sl.ServiceName, sl.Key, sl.Value)
	if _, err := db.ExecContext(ctx, sqlstr, sl.ServiceParent, sl.ServiceName, sl.Key, sl.Value); err != nil {
		return logerror(err)
	}
	// set exists
	sl._exists = true
	return nil
}

// Delete deletes the [ServiceLabel] from the database.
func (sl *ServiceLabel) Delete(ctx context.Context, db DB) error {
	switch {
	case !sl._exists: // doesn't exist
		return nil
	case sl._deleted: // deleted
		return nil
	}
	// delete with composite primary key
	const sqlstr = `DELETE FROM service_labels ` +
		`WHERE service_parent = $1 AND service_name = $2 AND key = $3`
	// run
	logf(sqlstr, sl.ServiceParent, sl.ServiceName, sl.Key)
	if _, err := db.ExecContext(ctx, sqlstr, sl.ServiceParent, sl.ServiceName, sl.Key); err != nil {
		return logerror(err)
	}
	// set deleted
	sl._deleted = true
	return nil
}

// ServiceLabelByServiceParentServiceNameKey retrieves a row from 'service_labels' as a [ServiceLabel].
//
// Generated from index 'sqlite_autoindex_service_labels_1'.
func ServiceLabelByServiceParentServiceNameKey(ctx context.Context, db DB, serviceParent, serviceName, key string) (*ServiceLabel, error) {
	// query
	const sqlstr = `SELECT ` +
		`service_parent, service_name, key, value ` +
		`FROM service_labels ` +
		`WHERE service_parent = $1 AND service_name = $2 AND key = $3`
	// run
	logf(sqlstr, serviceParent, serviceName, key)
	sl := ServiceLabel{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, serviceParent, serviceName, key).Scan(&sl.ServiceParent, &sl.ServiceName, &sl.Key, &sl.Value); err != nil {
		return nil, logerror(err)
	}
	return &sl, nil
}
